apply from: 'build.gradle'


List getTestClassNames() {
    File classesDir = sourceSets.test.output.classesDir
    String prefix = classesDir.toString() + '/'
    List names = []
    classesDir.traverse {
        if( it.absolutePath.endsWith( '.class' ) ) {
            String name = (it.absolutePath - prefix).replaceAll( '/', '.' ) - '.class'
            names << name
        }
    }
    return names
}

String pathToClassName(path, srcDirs) {
    //path = path[path.indexOf(testSub) + testSub.size() .. path.size()-1]
    srcDirs.each { dir ->
        if (path.startsWith(dir.toString())) {
            path = path - dir
            if (path.startsWith('/')) {
                path = path.replaceFirst('/', '')
            }
        }
    }
    String className = path.lastIndexOf('.').with {it != -1 ? path[0..<it] : path}
    return className.replaceAll( '/', '.' )
}

List filterClassNames(names, files) {
    List paths = []
    List filtered = []
    
    if (!files) {
        return names
    }

    if (files =~ /,/) {
        paths = files.tokenize(',')
    } else {
        paths << files
    }

    Set<File> srcDirs = sourceSets.test.java.getSrcDirs()
    paths.each { path ->
        String absPath = file(path).getAbsolutePath()
        String className = pathToClassName(absPath, srcDirs)
        if (className in names) {
            filtered << className
        }
    }

    return filtered
}

test {
    outputs.upToDateWhen({return false})

    doFirst {
        String testFiles = System.properties.get('testFiles', "")
        List names = filterClassNames(getTestClassNames(), testFiles)
        if (testFiles) {
            if (names) {
                filter {
                    setIncludePatterns( names as String[] )
                }
            } else {
                throw new StopExecutionException()
            }
        }
    }
}
